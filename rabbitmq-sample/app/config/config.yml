imports:
    - { resource: parameters.yml }
    - { resource: security.yml }

framework:
    #esi:             ~
    #translator:      { fallback: "%locale%" }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [ ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

old_sound_rabbit_mq:
    connections:
        default:
            host:     %rabbitmq_host%
            port:     %rabbitmq_port%
            user:     %rabbitmq_user%
            password: %rabbitmq_password%
            vhost:    %rabbitmq_vhost%
            lazy:     false

    producers:
        # The `delayed_producer` producer publishes messages to the `delay-exchange` exchange.
        # 
        # If the routing key is '', they are routed to the `delay-waiting-queue` queue,
        # to which no consumer is connected.
        delayed_producer:
            connection:       default
            # Publish to the `delay-exchange` exchange.
            exchange_options: { name: 'delay-exchange', type: direct }
            queue_options:
                # Declare queue `delay-waiting-queue`.
                name: 'delay-waiting-queue'
                # The queue is bound to the exchange with an empty routing key ('').
                routing-keys: []
                arguments:
                    # Messages in this queue expire after 5 seconds (5000 ms).
                    x-message-ttl: [ 'I', 5000 ]
                    # Expired messages are published back to the `delay-exchange` exchange…
                    x-dead-letter-exchange: [ 'S', 'delay-exchange' ]
                    # … with a routing key of 'working'.
                    x-dead-letter-routing-key: [ 'S', 'working' ]

    consumers:
        # The `delayed_consumer` consumer retrieves messages from the `delay-working-queue` queue,
        # which is bound to the `delay-exchange` exchange with a routing key of 'working'.
        # 
        # Messages published to the `delay-exchange` exchange with a routing key of 'working'
        # (typically expired messages from the `delay-waiting-queue` queue) will be routed
        # to the `delay-working-queue` queue and will be consumed by this consumer.
        delayed_consumer:
            connection:       default
            # Declare the `delay-exchange` exchange.
            exchange_options: { name: 'delay-exchange', type: direct }
            queue_options:
                # Declare queue `delay-working-queue`.
                name: 'delay-working-queue'
                # The queue is bound to the `delay-exchange` exchange with an routing key of 'working'.
                routing_keys: [ working ]
            # Messages are processed by the `sample_consumer` service.
            callback:         sample_consumer
